<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Elf</name>
    </assembly>
    <members>
        <member name="T:Elf.Architecture.Actions.ApiAction`2">
            <summary>
                Helps to create API enitities which usually resolve one simple task.
            </summary>
            <typeparam name="TRq">Request type.</typeparam>
            <typeparam name="TRs">Response type.</typeparam>
        </member>
        <member name="M:Elf.Architecture.Actions.ApiAction`2.#ctor(`0)">
            <summary>
                This ctor is for usage inside some other code.
            </summary>
            <param name="request">Request data.</param>
        </member>
        <member name="P:Elf.Architecture.Actions.ApiAction`2.In">
            <summary>
                Access to input data.
            </summary>
        </member>
        <member name="M:Elf.Architecture.Actions.ApiAction`2.Do">
            <summary>
                Children must redefine this method to implement logic.
            </summary>
            <returns>Something of [Response type], depending on a problem solved.</returns>
        </member>
        <member name="T:Elf.Architecture.Actions.IApiAction`2">
            <summary>
                Action is a simple class that only does one job.
                Request type and response type must be deterministic and constant.
                Each action should return same type of response, no matter how logic turned.
            </summary>
            <typeparam name="TRq"></typeparam>
            <typeparam name="TRs"></typeparam>
        </member>
        <member name="T:Elf.Architecture.Actions.IApiActionRequest">
            <summary>
                Base inteface to all action requests.
            </summary>
        </member>
        <member name="T:Elf.Architecture.Actions.IApiActionResponse">
            <summary>
                Base interface to all action responses.
            </summary>
        </member>
        <member name="T:Elf.Config.FrameworkConfiguration">
            <summary>
                Global configuration of the framework.
                Note, such long name was intentionaly chosen in order to extinguish access to configuration in user code,
                which in most cases might be unnecessary and cause potential issues.
            </summary>
        </member>
        <member name="T:Elf.Data.DynJsonObject">
            <summary>
                Representation of JSON object (JavaScript hash)
                which can be easily serialized to JSON and be deserialized from it.
            </summary>
        </member>
        <member name="T:Elf.Data.DynJsonTable">
            <summary>
                Most of results from SQL queries are returned in form of tables which should be easily mapped to JSON.
            </summary>
        </member>
        <member name="M:Elf.Data.DateTimeUtils.ToClientTime(System.DateTime)">
            <summary>
                Adjusts date from database according to client's timezone.
            </summary>
        </member>
        <member name="M:Elf.Data.DateTimeUtils.ToServerTime(System.DateTime)">
            <summary>
                Adjusts date from database according to client's timezone.
            </summary>
        </member>
        <member name="T:Elf.Data.ParamString">
            <summary>
                Parametrized string to have better variables then {0}
            </summary>
        </member>
        <member name="M:Elf.Data.TextUtils.Gist(System.String)">
            <summary>
                Removes all non-alphanumeric characters and lowers letters case from a string.
                This simple solution allows to compare users input where data is equal, but spelled differently.
            </summary>
        </member>
        <member name="P:Elf.Data.DbContext.ArithAbortOn">
            <summary>
                http://stackoverflow.com/questions/2248112/query-times-out-when-executed-from-web-but-super-fast-when-executed-from-ssms
                Set's global behaviour of AITHABORT flag which will result in added SET ARITHABORT ON before any DB request.
            </summary>
        </member>
        <member name="M:Elf.Data.DbContext.AddConnectionString(System.String,System.String)">
            <summary>
                Adds connection string to db context. We need this for cases like Tests, when CSs must be added manually.
            </summary>
            <param name="name">Connection string name</param>
            <param name="connection_string">Connection string data.</param>
        </member>
        <member name="T:Elf.Data.JsonValue">
            <summary>
                Instancess of this class must be never null.
            </summary>
        </member>
        <member name="T:Elf.Data.JsonObject">
            <summary>
                Representation of JSON object (JavaScript hash)
                which can be easily serialized to JSON and be deserialized from it.
            </summary>
        </member>
        <member name="M:Elf.Data.JsonObject.ToType``1">
            <summary>
                Tries to convert JsonObject to object of specified type
            </summary>
        </member>
        <member name="T:Elf.Data.JsonArray">
            <summary>
                Array of JSON objects.
            </summary>
        </member>
        <member name="T:Elf.Data.JsonTable">
            <summary>
                Most of results from SQL queries are returned in form of tables which should be easily mapped to JSON.
            </summary>
        </member>
        <member name="M:Elf.Data.JsonTools.Regroup(Elf.Data.JsonTable,Elf.Data.RegroupPattern,System.String,System.String)">
            <summary>
                Regroups data received in table format into flexible form with sub-items which allows to build usable JSON.
            </summary>
        </member>
        <member name="M:Elf.Data.QueryUtils.GetAllFields(System.Data.IDataReader)">
            <summary>
                Simply reads all fields into json object from current row in given reader.
            </summary>
            <param name="reader"></param>
            <returns></returns>
        </member>
        <member name="M:Elf.Dev.ClassHelper.GetInitProperty``1(``0@,Elf.Dev.ClassHelper.InitPropertyDelegate{``0},System.Object)">
            <summary>
                Initializes (if required) and returns property either in thread safe mode if sync_root is specified.
            </summary>
            <typeparam name="T">SqlText type, must be referential.</typeparam>
            <param name="field">Private field which contains reference to data.</param>
            <param name="initializer">BuildSql that initializes property.</param>
            <param name="sync_root">Synchronization object for lock statement. Pass if you want thread safety.</param>
            <returns>Reference to initialized property</returns>
        </member>
        <member name="M:Elf.Http.HttpClient.Get(System.String)">
            <summary>
                Sends get request and returns response body as string.
            </summary>
        </member>
        <member name="T:Elf.Http.QueryStringHelper">
            <summary>
                Adds extra methods which can be used to convert query string arguments to specific types.
            </summary>
        </member>
        <member name="P:Elf.Images.JpeFilterSettings.quality">
            <summary>
                jpg quality, 0..100 (default is 75)
            </summary>
        </member>
        <member name="P:Elf.Images.PngFilterSettings.compression_level">
            <summary>
                0..9 (default is 9)
            </summary>
        </member>
        <member name="P:Elf.Images.PngFilterSettings.depth">
            <summary>
                bits per pixel, 1..32 (default is 6)
            </summary>
        </member>
        <member name="T:Elf.Optimization.Callbacks">
            <summary>
                Definition of callback functions used in optimization classes.
            </summary>
        </member>
        <member name="T:Elf.Optimization.ElfMemoryCache">
            <summary>
                Implements Elf-specific memory caching utility.
            </summary>
        </member>
        <member name="T:Elf.Optimization.LazyContext">
            <summary>
                Allows to create a set of variables with lazy evaluation of each value (on demand).
            </summary>
        </member>
        <member name="T:Elf.Optimization.RequestCache">
            <summary>
                Implements request cache, which is updated on every request.
            </summary>
        </member>
        <member name="T:Elf.Parallel.ThreadInput">
            <summary>
                Every thread receives instance of this type as input data.
            </summary>
        </member>
        <member name="T:Elf.Parallel.ThreadedTaskProcessor">
            <summary>
                Processes tasks in thread pool with limited amount of threads.
            </summary>
        </member>
        <member name="M:Elf.Parallel.ThreadedTaskProcessor.Start(System.Object)">
            <summary>
                Initialization.
            </summary>
            <param name="data">Not used here.</param>
        </member>
        <member name="M:Elf.Parallel.ThreadedTaskProcessor.ProcessTask(System.Object,Elf.Parallel.TaskProcessorCallback)">
            <summary>
                Puts task into thread to be processed.
            </summary>
            <param name="data">Data specific to given task.</param>
            <param name="callback">Callback to process given data.</param>
        </member>
        <member name="M:Elf.Parallel.ThreadedTaskProcessor.Stop">
            <summary>
                Waits until every thread is done.
            </summary>
        </member>
        <member name="M:Elf.Parallel.ThreadedTaskProcessor.UnlimitedWaitAll(System.Collections.Generic.IEnumerable{System.Threading.ManualResetEvent})">
            <summary>
                .NET has a limit on the amount of handles--64.
                So we'd better create our own waiting method.
            </summary>
        </member>
        <member name="T:Elf.Security.SimpleEncryptor2">
            <summary>
                Provides simple two ways encryption with constant key and vector.
                Can be used to secure important but not too valuable data such as cookies.
                This is IDisposable version of SimpleEncryptor class.
            </summary>
        </member>
        <member name="M:Elf.Security.SimpleEncryptor2.StrToBytes(System.String)">
            Convert a string to a byte array.  NOTE: Normally we'd create a Byte Array from a string using an ASCII encoding (like so).
        </member>
        <member name="T:Elf.Security.SessionToken">
            <summary>
                Helps to identify current session and user.
            </summary>
        </member>
        <member name="T:Elf.Security.SimpleEncryptor">
            <summary>
                Provides simple two ways encryption with constant key and vector.
                Can be used to secure important but not too valuable data such as cookies.
            </summary>
        </member>
        <member name="M:Elf.Security.SimpleEncryptor.StrToBytes(System.String)">
            Convert a string to a byte array.  NOTE: Normally we'd create a Byte Array from a string using an ASCII encoding (like so).
        </member>
        <member name="T:Elf.Security.Validator">
            <summary>
                Helper class to validate things.
            </summary>
        </member>
        <member name="M:Elf.Security.Validator.EmailIsValid(System.String)">
            <summary>
                Validates email format.
                According to http://stackoverflow.com/questions/1903356/email-validation-regular-expression
                regular expressions mustn't be used and the MailAddress class is sophisticated enough.
            </summary>
            <param name="email">Email address to test, in string format</param>
            <returns>True if the email is valid and False otherwise</returns>
        </member>
        <member name="T:Elf.View.Action">
            <summary>
                Requests are handled by different types of actions,
                basic functionality of which is described in the generic Action class.
            </summary>
        </member>
        <member name="M:Elf.View.Action.OnLoad">
            <summary>
                All the main work of the action must be described in this method, overriden by successors.
            </summary>
        </member>
        <member name="M:Elf.View.Action.IsGet">
            <summary>
                Determines whether request method is GET.
            </summary>
            <returns>true if the method is GET and false otherwise</returns>
        </member>
        <member name="M:Elf.View.Action.IsPost">
            <summary>
                Determines whether request method is POST.
            </summary>
            <returns>true if the method is POST and false otherwise</returns>
        </member>
        <member name="M:Elf.View.Action.SendEmail(Elf.Mail.EmailAction,System.String,System.String,System.String)">
            <summary>
                Sends email using specified email action.
            </summary>
            <param name="action">Instance of email action to take content from</param>
            <param name="to">Recipient</param>
            <param name="from">Sender</param>
            <param name="subject">Message subject</param>
        </member>
        <member name="T:Elf.View.Elements.PhoneNumberView">
            <summary>
            Phone number appearance.
            </summary>
        </member>
        <member name="M:Elf.View.Elements.PhoneNumberView.#ctor(System.String)">
            <summary>
            Creates view for a phone number.
            </summary>
            <param name="phone_number">Not formatted phone number.</param>
        </member>
        <member name="M:Elf.View.Elements.PhoneNumberView.Render">
            <summary>
            Renders phone number in a cool formatted way.
            </summary>
            <returns>Formatted phone number.</returns>
        </member>
        <member name="M:Elf.View.SmartTemplateLoader.LoadParseHtmlFromFile(System.String)">
            <summary>
                Loads html template into string and all inner templates recursively
            </summary>
            <param name="template_name">Relative path to the template</param>
            <returns>Html string</returns>
        </member>
        <member name="M:Elf.View.SmartTemplateLoader.OptimizeHtml(System.String)">
            <summary>
                Removes whitespace from HTML
            </summary>
            <param name="html"></param>
            <returns></returns>
        </member>
        <member name="M:Elf.View.SmartTemplateLoader.AdjustResources(HtmlAgilityPack.HtmlNode)">
            <summary>
                Puts scripts and stylesheets into the right order:
                styles within the head tag and scripts at the end of the body tag.
            </summary>
            <param name="doc">Organized document instance</param>
            <returns>Processed html string</returns>
        </member>
        <member name="M:Elf.View.SmartTemplateLoader.GetAbsoluteTemplatePath(System.String)">
            <summary>
                Gets absolute template path
            </summary>
        </member>
        <member name="M:Elf.View.SmartTemplateLoader.LoadInnerTemplates(System.String)">
            <summary>
                Parses raw html string and loads inner templates if specified
            </summary>
        </member>
        <member name="M:Elf.View.SmartTemplateLoader.LoadIncludes(System.String)">
            <summary>
                Parses raw html string and loads inner templates if specified
            </summary>
        </member>
        <member name="T:Elf.View.Tags.BreakLinesTag">
            <summary>
                Allows to include partials (sub-templates) into current template.
            </summary>
        </member>
        <member name="M:Elf.View.Tags.ElseTag.GetClosingTags">
            <summary>
            Gets the tags that indicate the end of the current tag's content.
            </summary>
        </member>
        <member name="T:Elf.View.Tags.JsonTag">
            <summary>
                Allows to include partials (sub-templates) into current template.
            </summary>
        </member>
        <member name="T:Elf.View.Tags.FormatPhoneTag">
            <summary>
            Allows to include partials (sub-templates) into current template.
            </summary>
        </member>
        <member name="T:Elf.View.Tags.RenderPartialTag">
            <summary>
            Allows to render sub-templates with current context.
            </summary>
        </member>
        <member name="T:Elf.View.Tags.RenderTag">
            <summary>
                Allows to include partials (sub-templates) into current template in runtime.
            </summary>
        </member>
        <member name="T:Elf.View.Tags.RemoveHtmlsTagsTag">
            <summary>
                Remove html tags from string
            </summary>
        </member>
        <member name="T:Elf.View.Tags.EscapeUrlTag">
            <summary>
                Allows to include partials (sub-templates) into current template.
            </summary>
        </member>
        <member name="T:Elf.View.Tags.FormatDateTimeTag">
            <summary>
                Allows to include partials (sub-templates) into current template.
            </summary>
        </member>
        <member name="T:Elf.View.Tags.UnescapeTag">
            <summary>
                Allows to include partials (sub-templates) into current template.
            </summary>
        </member>
        <member name="T:Elf.View.Tags.EscapeTag">
            <summary>
                Allows to include partials (sub-templates) into current template.
            </summary>
        </member>
        <member name="T:Elf.View.Tags.RawTag">
            <summary>
                Allows to include partials (sub-templates) into current template.
            </summary>
        </member>
        <member name="T:Elf.View.Tags.FormatMoneyTag">
            <summary>
                Allows to include partials (sub-templates) into current template.
            </summary>
        </member>
        <member name="T:Elf.View.Tags.UnlessTag">
            <summary>
                Allows to use match condition tag:
                {{#unless x}}
                a
                {{/unless}}
            </summary>
        </member>
        <member name="T:Elf.View.Tags.MatchTag">
            <summary>
                Allows to use match condition tag:
                {{#match x == y}}
                a
                {{#nomatch}}
                b
                {{/match}}
            </summary>
        </member>
        <member name="T:Elf.View.Tags.NoMatchTag">
            <summary>
                Defines a tag that renders its content if all preceding match tag.
            </summary>
        </member>
        <member name="M:Elf.View.Tags.NoMatchTag.#ctor">
            <summary>
                Initializes a new instance of a NoMatchTag.
            </summary>
        </member>
        <member name="M:Elf.View.Tags.NoMatchTag.GetIsContextSensitive">
            <summary>
                Gets whether the tag only exists within the scope of its parent.
            </summary>
        </member>
        <member name="M:Elf.View.Tags.NoMatchTag.GetClosingTags">
            <summary>
                Gets the tags that indicate the end of the current tag's content.
            </summary>
        </member>
        <member name="M:Elf.View.Tags.NoMatchTag.GetChildContextParameters">
            <summary>
                Gets the parameters that are used to create a new child context.
            </summary>
            <returns>The parameters that are used to create a new child context.</returns>
        </member>
        <member name="T:Elf.View.Tags.PartialTag">
            <summary>
                Allows to include partials (sub-templates) into current template.
            </summary>
        </member>
        <member name="M:Elf.View.TemplateAction.SetJsonResponse(System.String)">
            <summary>
                This class returns JSON only for debugging purposes.
            </summary>
        </member>
        <member name="T:Elf.Routing.Router">
            <summary>
                Application must declare a router for itself, based on this class.
                All request patterns must be mapped to specific actions in the router constructor.
            </summary>
        </member>
        <member name="M:Elf.Routing.Router.Map``1(System.String)">
            <summary>
                Maps action to specific request path or path template.
            </summary>
            <param name="path">
                Request path. May have complex format,
                describing many paths of common structure.
            </param>
        </member>
        <member name="M:Elf.Routing.ActionRouter`1.GetHttpHandler(System.Web.Routing.RequestContext)">
            <summary>
                This method is vital for ASP.NET routing mechanizm.
                We'd basically need two entities: router and handler.
                However to simplify matters, every page is router and handler in one substance.
                That's why it returns itself as a handler.
            </summary>
            <param name="request_context">Context of the current request</param>
            <returns>Handler to process request. In this case it returns itself as a handler.</returns>
        </member>
        <member name="T:Elf.WebServices.Clients.IWebServiceClient">
            <summary>
            Describes client HTTP interface to a web service.
            </summary>
        </member>
        <member name="T:Elf.WebServices.Clients.WebServiceClient">
            <summary>
            Provides basic HTTP api to interact with a web service over HTTP+JSON.
            Support JSON only and relies on service configuration in web.config.
            </summary>
        </member>
        <member name="T:Elf.WebServices.Clients.WebServiceClientException">
            <summary>
            Smart wrapper for WebException from Web Service request
            </summary>
        </member>
    </members>
</doc>
